import pygame
import random
import math

# Constants variables
WIDTH, HEIGHT = 1280, 600


class Tank:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–Ω–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –º–µ—Ç–æ–¥–∞–º–∏."""
    def __init__(self, x, y, speed):
        self.x = x
        self.y = y
        self.speed = speed
        self.tank_img = pygame.image.load("tank.png")
        self.new_size = (self.tank_img.get_width() // 5, self.tank_img.get_height() // 5)
        self.tank_transform_img = pygame.transform.scale(self.tank_img, self.new_size)  # –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–∞–Ω–∫–∞
        self.tank_img_rect = self.tank_transform_img.get_rect(center=(self.x, self.y))  # —Ü–µ–Ω—Ç—Ä —Ç–∞–Ω–∫–∞ –ø–æ –æ—Å–∏ x –∏ y
        self.tank_img_rect.x = x

    def move_tank(self):
        """–î–≤–∏–≥–∞–µ—Ç —Ç–∞–Ω–∫ –ø–æ –æ—Å–∏ x."""
        if pygame.key.get_pressed()[pygame.K_a]:
            self.x -= self.speed
        if pygame.key.get_pressed()[pygame.K_d]:
            self.x += self.speed
        
        self.tank_img_rect.center = (self.x, self.y)  # —Ü–µ–Ω—Ç—Ä —Ç–∞–Ω–∫–∞ –ø–æ –æ—Å–∏ x –∏ y
        
    def draw_tank(self, win):
        """–†–∏—Å—É–µ—Ç —Ç–∞–Ω–∫ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ."""
        win.blit(self.tank_transform_img, self.tank_img_rect)


class Field:
    """–°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
    def __init__(self, width, height):
        self._width = width
        self._height = height
        self.filed_img = pygame.image.load("ground.png")
        self.field_img = pygame.transform.scale(self.filed_img, (self._width, self._height))
    
    def draw_field(self, win):
        """–†–∏—Å—É–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ."""
        win.blit(self.field_img, (0, 0))
    
    def draw_border(self, tank:Tank):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è."""
        if tank.x < 0 or tank.x > self._width - tank.tank_img_rect.width:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            tank.x = max(0, min(tank.x, self._width - tank.tank_img_rect.width))
        
    def remove_offscreen_bullets(self, bullets):
         for bullet in bullets[:]:
            if bullet.pos_x < 0 or bullet.pos_x > self._width or bullet.pos_y < 0 or bullet.pos_y > self._height:
                bullet.active = False
    
    def change_targets_direction_if_needed(self, target):
       if target.rect.left <= 0 or target.rect.right >= self._width:
            target.speed_x *= -1


class Cannon:
    """–°–æ–∑–¥–∞–µ—Ç –ø—É—à–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∞–Ω–∫–∞ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –º—ã—à—å—é."""
    def __init__(self, tank:Tank):
        self.tank = tank  # –ü—É—à–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∞–Ω–∫–∞
        self.angle = 0
        self.max_angle = 45  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –ø—É—à–∫–∏ –Ω–∞ 45 –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (–≤—Å–µ–≥–æ 90 –≥—Ä–∞–¥—É—Å–æ–≤)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—à–∫–∏
        self.cannon_img = pygame.image.load("canon.png")
        self.cannon_img = pygame.transform.smoothscale(self.cannon_img, (60, 60))  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø—É—à–∫–∏
        self.cannon_rect = self.cannon_img.get_rect(center=(self.tank.x, self.tank.y - 30))  

    def update_cannon(self):
        # –ü—É—à–∫–∞ –¥–≤–∏–≥–∞–µ—Ç—Å—è —Å —Ç–∞–Ω–∫–æ–º
        self.cannon_rect.center = (self.tank.x, self.tank.y - 30)  # –ü—É—à–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É —Ç–∞–Ω–∫–∞, –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ

        # –£–≥–æ–ª –º–µ–∂–¥—É –ø—É—à–∫–æ–π –∏ –º—ã—à—å—é (–¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –ø—É—à–∫–∏)
        mx, my = pygame.mouse.get_pos()
        dx = mx - self.tank.x
        dy = my - self.tank.y
        self.angle = math.degrees(math.atan2(dy, dx))

    def draw_cannon(self, win):
        # –í—Ä–∞—â–∞–µ–º –ø—É—à–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≥–ª–∞
        rotated_cannon = pygame.transform.rotate(self.cannon_img, -self.angle)  # –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–≥–æ–ª, —Ç–∞–∫ –∫–∞–∫ pygame —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É
        rotated_cannon_rect = rotated_cannon.get_rect(center=self.cannon_rect.center)
        win.blit(rotated_cannon, rotated_cannon_rect)


class Targets(pygame.sprite.Sprite):
    def __init__(self, x, y, image, speed_x=1):
        super().__init__()
        self.image = image
        self.rect = self.image.get_rect(center=(x, y))
        self.speed_x = speed_x  # —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –æ—Å–∏ X
        self.direction = 1  # 1 - –≤–ø—Ä–∞–≤–æ, -1 - –≤–ª–µ–≤–æ

    def update(self):
        # –ò–∑–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ü–µ–ª–∏ –ø–æ –æ—Å–∏ X –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.rect.x += self.speed_x * self.direction

    def draw(self, win):
        win.blit(self.image, self.rect)  # –†–∏—Å—É–µ–º —Ü–µ–ª—å
    

class Bullet:
    """–°–ø–∞–≤–Ω–∏—Ç –ø—É–ª–∏ —Ç–∞–Ω—á–∫–∞"""
    def __init__(self, x, y, angle, speed=5):
        self.pos_x = x
        self.pos_y = y
        self.speed = speed

        # Angle
        self.angle = angle
        self.dir_x = math.cos(math.radians(angle))
        self.dir_y = math.sin(math.radians(angle))

        # PNG
        self.yadro_img = pygame.image.load("yadro.png")
        self.yadro_img = pygame.transform.scale(self.yadro_img, (20, 20))
        self.yadro_img_rect = self.yadro_img.get_rect(center=(x, y))

        self.active = True

    def update_bullet(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —É–≥–ª–∞ –ø–æ–ª–µ—Ç–∞"""
        if not self.active:
            return
        self.pos_x += self.dir_x * self.speed
        self.pos_y += self.dir_y * self.speed
        self.yadro_img_rect.center = (self.pos_x, self.pos_y)

    def check_collision(self, target_group):
        for target in target_group:
            if self.yadro_img_rect.colliderect(target.rect):
                self.active = False
                target.kill()
                return True
        return False

    def draw_bullet(self, win):
        if self.active:
            win.blit(self.yadro_img, self.yadro_img_rect)


class EnemyBullet(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        

class GameRoundManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤—ã–º–∏ —Ä–∞—É–Ω–¥–∞–º–∏, —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ö, —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–Ω–∫ –∏ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Å —Ü–µ–ª—è–º–∏."""
    def __init__(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤
        self.tank = Tank(x=100, y=400, speed =2)
        self.field = Field(WIDTH, HEIGHT)
        self.cannon = Cannon(self.tank)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
        pygame.init()
        self.WIN = pygame.display.set_mode((WIDTH, HEIGHT))
        pygame.display.set_caption("TANK GAME")
        self.clock = pygame.time.Clock()
        self.FPS = 60
        self.running = True

        #FONT
        self.font = pygame.font.SysFont("Arial", 30)

        #Varibles
        self.score = 0

        # üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ü–µ–ª–µ–π
        self.filenames = [
            "turret_targets0.png",
            "turret_targets1.png",
            "turret_targets2.png",
        ]
        # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.target_images = [
            pygame.transform.scale(pygame.image.load(name).convert_alpha(), (60, 60))
            for name in self.filenames
        ]

        self.targets_group = pygame.sprite.Group()

        # üéØ –°–ø–∞–≤–Ω–∏–º –≤—Å–µ —Ü–µ–ª–∏
        target_positions = [(300, 50), (600, 100), (900, 150)] 
        for img, pos in zip(self.target_images, target_positions):
            target = Targets(pos[0], pos[1], img)
            self.targets_group.add(target)

        # –°–ø–∏—Å–æ–∫ –ø—É–ª—å
        self.bullets = []

    def draw_score(self):
        score_text = self.font.render(f"Score: {self.score}", True, (255, 255, 255))
        self.WIN.blit(score_text, (20, 20))

    def main(self):
        while self.running:
            self.clock.tick(self.FPS)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False
                if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                    if not any(b.active for b in self.bullets):  # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–ª—å
                        cx, cy = self.cannon.cannon_rect.center
                        angle = self.cannon.angle
                        new_bullet = Bullet(cx, cy, angle)
                        self.bullets.append(new_bullet)

            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
            self.WIN.fill((0, 0, 0))
            self.field.draw_field(self.WIN)
            self.field.draw_border(self.tank)
            
            for target in self.targets_group: #–º–µ–Ω—è–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Ü–µ–ª–µ–π –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–ø—Ä–∏–∫–∞—Å–∞—é—Ç—å—Å—è —Å –≥—Ä–∞–Ω–∏—Ü–µ–π –ø–æ–ª—è
                self.field.change_targets_direction_if_needed(target)

            # –î–≤–∏–≥–∞–µ–º –∏ —Ä–∏—Å—É–µ–º —Ç–∞–Ω–∫
            self.tank.move_tank()
            self.tank.draw_tank(self.WIN)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∏—Å—É–µ–º –ø—É—à–∫—É
            self.cannon.update_cannon()
            self.cannon.draw_cannon(self.WIN)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∏—Å—É–µ–º –ø—É–ª–∏
            for bullet in self.bullets[:]:
                bullet.update_bullet()
                if not bullet.active:
                    self.bullets.remove(bullet)
                bullet.draw_bullet(self.WIN)
                if bullet.check_collision(self.targets_group):
                    self.score += 1
            self.field.remove_offscreen_bullets(self.bullets)

            used_positions = set()

             #–†–µ—Å–ø–∞–≤–Ω —Ü–µ–ª–µ–π       
            while len(self.targets_group) < 3: #–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ç—Ä–∏ —Ü–µ–ª–∏, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –º–µ–Ω—å—à–µ –∑–Ω–∞—á–∏—Ç –Ω–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –ø–Ω–≥ —Å –Ω–æ–≤–∏–º–∏ –∫–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                x = random.randint(50, 300)  
                y = random.randint(50, 150)  
                speed = random.uniform(1, 3)
                if (x, y) in used_positions:
                    continue

                used_positions.add((x, y))
                img = random.choice(self.target_images)
                self.targets_group.add(Targets(x, y, img, speed))

            self.targets_group.update()
            self.targets_group.draw(self.WIN)
            self.draw_score()

            pygame.display.update()

        pygame.quit()

if __name__ == "__main__":
    game = GameRoundManager()
    game.main()
